#!/bin/env bash

set -x

PIPE_FILE="/tmp/tasks_pipe"
TASKS_DIR="$HOME/.config/eww/bar_horizontal/calendar_tasks"

mkfifo $PIPE_FILE 2> /dev/null

normalize_date () {
  values=($(echo $1 | tr "." " "))

  day=${values[0]}
  month=${values[1]}
  year=${values[2]}


  if (( ${#day} < 2 )); then
    day=0$day
  fi

  if (( ${#month} < 2 )); then
    month=0$month
  fi

  echo "$day.$month.$year"
}

start_monitor() {
  while true; do
    all_files=($(ls $TASKS_DIR | sort))

    for i in ${all_files[@]}; do
      file_date=$(echo $i | awk -F '.' '{printf "%s/%s/%s", $2, $1, $3}')
      file_date=$(date --date="$file_date" +%s)
      cur_date=$(date +%s)

      (( $cur_date - file_date > 86400 )) && rm $TASKS_DIR/$i
    done

    today=$(date +%d.%m.%Y)
    tasks=$(get_day_tasks $today)

    if [ "$tasks" != "" ]; then
      tasks=($tasks)

      for i in ${tasks[@]}; do
        time=$(date +%s)
        time_int=$(date --date="$i" +%s)

        (( $time > $time_int )) && notify-send -t 0 "$i" "$(get_task $today $i)"
      done
    fi

    sleep 120
  done
}

listen_tasks() {
  while true; do
    new_date=$(cat $PIPE_FILE)

    out_widget $new_date
  done
}

out_widget() {
  output=""
  getting_date=$(normalize_date $1)
  today_tasks=($(get_day_tasks $getting_date))
  task_counter=1

  widget_header="(box :orientation \"v\" "`
               `":spacing 5 "`
               `"(button :halign \"center\" "`
               `":height 5"`
               `":onrightclick \"scripts/task_manager delete_day $getting_date\" "`
               `"\"$getting_date\") "`
               `"(scroll :height 80 "

  for i in ${today_tasks[@]}; do
    new_item="(button :class \"bar_text\" :halign \"start\" "`
            `":onclick \"scripts/task_manager notify_task $getting_date $i\" "`
            `":onrightclick \"scripts/task_manager delete_task $getting_date $i\" "`
            `":onmiddleclick \"scripts/task_manager edit_task $getting_date $i\" "`
            `"\"$task_counter. $i\") "

    output=$output$new_item
    let task_counter=$task_counter+1
  done

  output="$widget_header(box :orientation \"v\" :spacing 3 :space-evenly \"false\" $output )))"

  echo $output
}

create_task() {
  cur_date=$(date +%Y.%m.%d)
  plan_date_filename=$(normalize_date $1)
  values=($(echo $plan_date_filename | tr "." " "))
  plan_date_compare="${values[2]}.${values[1]}.${values[0]}"

  if [[ "$cur_date" > "$plan_date_compare" ]]; then
    notify-send "Cannot planning to the past"
  else
    alacritty --class float_alacritty -o window.dimensions.columns=84 -o \
      window.dimensions.lines=24 -e nvim $TASKS_DIR/$plan_date_filename &
  fi
}

get_day_tasks() {
  if [ "$1" == "" ]; then
    getting_date=$(date +%d.%m.%Y)
  else
    getting_date=$1
  fi

  day_file=$TASKS_DIR/$getting_date
  output=""

  if [ -f $day_file ]; then
    sed -i '/^$/d' $day_file
    output=$(cat $day_file | grep -E$2 "^[0-9]{1,2}:[0-9]{1,2}$")
  fi

  echo $output
}

delete_task() {
  getting_date=$1
  task_time=$2
  day_file=$TASKS_DIR/$getting_date

  if [ ! -f $day_file ]; then
    exit
  fi

  day_tasks=($(get_day_tasks $getting_date n))
  getting_task_line_number=""
  next_task_line_number=""

  for ((i=0; i < ${#day_tasks[@]}; i++)); do
    time_match=$(echo ${day_tasks[i]} | grep $task_time)
    if [ "$time_match" != "" ]; then
      getting_task_line_number=$(echo ${day_tasks[i]} | grep -Eo "^[0-9]+")
      next_task_line_number=$(echo ${day_tasks[i+1]} | grep -Eo "^[0-9]+")
      break
    fi
  done

  if [ "$getting_task_line_number" == "" ]; then
    exit
  fi

  all_lines=$(cat $day_file | wc -l)
  if [ "$next_task_line_number" == "" ]; then
    sed -i "${getting_task_line_number},${all_lines}d" $day_file
  else
    let "next_task_line_number = $next_task_line_number - 1"
    sed -i "${getting_task_line_number},${next_task_line_number}d" $day_file
  fi

  echo $getting_date > $PIPE_FILE
}

delete_day() {
  day_filename=$1
  day_filepath=$TASKS_DIR/$day_filename

  [ -f $day_filepath ] && rm $day_filepath && echo $day_filename > $PIPE_FILE
}

edit_day() {
  full_date=$1
  filepath="$TASKS_DIR/$full_date"
  nvim_opts=""

  if [ "$2" != "" ]; then
    line_number=$(cat $filepath | grep -n $2 | grep -Eo "^[0-9]+")
    [ "$line_number" != "" ] && let line_number=$line_number+1 && nvim_opts="+$line_number"
  fi

  alacritty --class float_alacritty -o window.dimensions.columns=84 -o \
    window.dimensions.lines=24 -e nvim $nvim_opts $filepath &
}

notify_task() {
  task_text=$(get_task $1 $2)
  notify-send "$1" "$task_text"
}

get_task() {
  getting_date=$1
  day_file=$TASKS_DIR/$getting_date

  if [ ! -f $day_file ]; then
    exit
  fi

  task_time=$2
  day_tasks=($(get_day_tasks $getting_date n))
  getting_task_line_number=""
  next_task_line_number=""

  for ((i=0; i < ${#day_tasks[@]}; i++)); do
    time_match=$(echo ${day_tasks[i]} | grep $task_time)
    if [ "$time_match" != "" ]; then
      getting_task_line_number=$(echo ${day_tasks[i]} | grep -Eo "^[0-9]+")
      next_task_line_number=$(echo ${day_tasks[i+1]} | grep -Eo "^[0-9]+")
      break
    fi
  done

  if [ "$getting_task_line_number" == "" ]; then
    exit
  fi

  all_lines=$(cat $day_file | wc -l)

  if [ "$next_task_line_number" == "" ]; then
    cat $day_file | sed "1,${getting_task_line_number}d"
  else
    cat $day_file | sed "1,${getting_task_line_number}d;${next_task_line_number},${all_lines}d"
  fi
}


[ "$1" == "monitor" ] && start_monitor &
[ "$1" == "listen" ] && listen_tasks
[ "$1" == "get_day" ] && out_widget $2
[ "$1" == "create" ] && create_task $2
[ "$1" == "notify_task" ] && notify_task $2 $3
[ "$1" == "edit_task" ] && edit_day $2 $3
[ "$1" == "delete_task" ] && delete_task $2 $3
[ "$1" == "delete_day" ] && delete_day $2
